(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{679:function(e,n,t){"use strict";t.r(n);var a=t(21),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"table-表格"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#table-表格"}},[e._v("#")]),e._v(" Table 表格")]),e._v(" "),t("p",[e._v("用于展示多条结构类似的数据，可对数据进行排序、筛选、对比或其他自定义操作。")]),e._v(" "),t("h2",{attrs:{id:"基础用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础用法"}},[e._v("#")]),e._v(" 基础用法")]),e._v(" "),t("p",[e._v("基础的表格展示用法。")]),e._v(" "),t("p",[e._v("Name")]),e._v(" "),e._v(" | Age\n"),e._v(" | Address\n"),e._v(" "),t("p",[e._v("------------- | ------------ | ------------------------\nJohn Brown | 18 | New York No. 1 Lake Park\nJim Green | 24 | London No. 1 Lake Park\nJoe Black | 30 | Sydney No. 1 Lake Park\nJon Snow | 26 | Ottawa No. 2 Lake Park")]),e._v(" "),t("div",{staticClass:"language-hljs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<template>\n    <xn-table class="table" :columns="columns1" :data="data1"></xn-table>\n</template>\n<script>\nexport default {\n    data() {\n        return {\n            columns1: [\n                {\n                    title: "Name",\n                    key: "name"\n                },\n                {\n                    title: "Age",\n                    key: "age",\n                },\n                {\n                    title: "Address",\n                    key: "address"\n                }\n            ],\n            data1: [\n                {\n                    name: "John Brown",\n                    age: 18,\n                    address: "New York No. 1 Lake Park",\n                    date: "2016-10-03"\n                },\n                {\n                    name: "Jim Green",\n                    age: 24,\n                    address: "London No. 1 Lake Park",\n                    date: "2016-10-01"\n                },\n                {\n                    name: "Joe Black",\n                    age: 30,\n                    address: "Sydney No. 1 Lake Park",\n                    date: "2016-10-02"\n                },\n                {\n                    name: "Jon Snow",\n                    age: 26,\n                    address: "Ottawa No. 2 Lake Park",\n                    date: "2016-10-04"\n                },\n                {\n                    name: "John Brown",\n                    age: 18,\n                    address: "New York No. 1 Lake Park",\n                    date: "2016-10-03"\n                }\n            ]\n        };\n    }\n};\n<\/script>\n')])])]),t("p",[e._v("__\n显示代码")]),e._v(" "),t("h2",{attrs:{id:"带斑马纹表格"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#带斑马纹表格"}},[e._v("#")]),e._v(" 带斑马纹表格")]),e._v(" "),t("p",[e._v("使用带斑马纹的表格，可以更容易区分出不同行的数据。")]),e._v(" "),t("p",[e._v("Name")]),e._v(" "),e._v(" | Age\n"),e._v(" | Address\n"),e._v(" "),t("p",[e._v("------------- | ------------ | ------------------------\nJohn Brown | 18 | New York No. 1 Lake Park\nJim Green | 24 | London No. 1 Lake Park\nJoe Black | 30 | Sydney No. 1 Lake Park\nJon Snow | 26 | Ottawa No. 2 Lake Park")]),e._v(" "),t("p",[e._v("stripe 属性可以创建带斑马纹的表格。它接受一个 Boolean，默认为 false，设置为 true 即为启用。")]),e._v(" "),t("div",{staticClass:"language-hljs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<xn-table class="table" :columns="columns1" :data="data1" :stripe="true"></xn-table>\n')])])]),t("p",[e._v("__\n显示代码")]),e._v(" "),t("h2",{attrs:{id:"固定表头"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#固定表头"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://ui.fullstackjavascript.cn/components/data/table.html#%E5%9B%BA%E5%AE%9A%E8%A1%A8%E5%A4%B4",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" 固定表头")]),e._v(" "),t("p",[e._v("纵向内容过多时，可选择固定表头。")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("col 1")]),e._v(" "),t("th",[e._v("col 2")]),e._v(" "),t("th",[e._v("col 3")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("John Brown")]),e._v(" "),t("td",[e._v("18")]),e._v(" "),t("td",[e._v("New York No. 1 Lake Park")])]),e._v(" "),t("tr",[t("td",[e._v("Jim Green")]),e._v(" "),t("td",[e._v("24")]),e._v(" "),t("td",[e._v("London No. 1 Lake Park")])]),e._v(" "),t("tr",[t("td",[e._v("Joe Black")]),e._v(" "),t("td",[e._v("30")]),e._v(" "),t("td",[e._v("Sydney No. 1 Lake Park")])]),e._v(" "),t("tr",[t("td",[e._v("Jon Snow")]),e._v(" "),t("td",[e._v("26")]),e._v(" "),t("td",[e._v("Ottawa No. 2 Lake Park")])]),e._v(" "),t("tr",[t("td",[e._v("John Brown")]),e._v(" "),t("td",[e._v("18")]),e._v(" "),t("td",[e._v("New York No. 1 Lake Park")])]),e._v(" "),t("tr",[t("td",[e._v("Jim Green")]),e._v(" "),t("td",[e._v("24")]),e._v(" "),t("td",[e._v("London No. 1 Lake Park")])]),e._v(" "),t("tr",[t("td",[e._v("Joe Black")]),e._v(" "),t("td",[e._v("30")]),e._v(" "),t("td",[e._v("Sydney No. 1 Lake Park")])]),e._v(" "),t("tr",[t("td",[e._v("Jon Snow")]),e._v(" "),t("td",[e._v("26")]),e._v(" "),t("td",[e._v("Ottawa No. 2 Lake Park")])])])]),e._v(" "),t("p",[e._v("Name")]),e._v(" "),e._v(" | Age\n"),e._v(" | Address\n"),e._v(" "),t("p",[e._v("------------- | ------------ | ----------------")]),e._v(" "),t("p",[e._v("只要在 xn-table 元素中定义了 height 属性，即可实现固定表头的表格，而不需要额外的代码。")]),e._v(" "),t("div",{staticClass:"language-hljs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<xn-table class="table" :columns="columns1" :data="data1" height="200px"></xn-table>\n')])])]),t("p",[e._v("__\n显示代码")]),e._v(" "),t("h2",{attrs:{id:"多选"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多选"}},[e._v("#")]),e._v(" 多选")]),e._v(" "),t("p",[e._v("选择多行数据时使用 Checkbox。")]),e._v(" "),t("p",[t("input",{attrs:{type:"checkbox"}}),e._v(" | Name")]),e._v(" "),e._v(" | Age\n"),e._v(" | Address\n"),e._v(" "),t("p",[e._v("----------------------- | ------------- | ------------ | ------------------------\n"),t("input",{attrs:{type:"checkbox"}}),e._v(" | John Brown | 18 | New York No. 1 Lake Park\n"),t("input",{attrs:{type:"checkbox"}}),e._v(" | Jim Green | 24 | London No. 1 Lake Park\n"),t("input",{attrs:{type:"checkbox"}}),e._v(" | Joe Black | 30 | Sydney No. 1 Lake Park\n"),t("input",{attrs:{type:"checkbox"}}),e._v(" | Jon Snow | 26 | Ottawa No. 2 Lake Park")]),e._v(" "),t("p",[e._v("通过给 columns 数据设置一项，指定 type: 'selection'，即可自动开启多选功能。")]),e._v(" "),t("p",[e._v("正确使用好以下事件，可以达到需要的效果：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("@on-select，选中某一项触发，返回值为 selection 和 row，分别为已选项和刚选择的项。\n\n@on-select-all，点击全选时触发，返回值为 selection，已选项。\n")])])]),t("div",{staticClass:"language-hljs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<xn-table\n    :columns="columns1"\n    :data="data1"\n    @on-select="hanldeSelect"\n    @on-select-all="handleSelectAll"\n></xn-table>\n<script>\nexport default {\n    data() {\n        return {\n            columns1: [\n                {\n                    type: "selection",\n                    width: 60,\n                    align: "center"\n                },\n                {\n                    title: "Name",\n                    key: "name"\n                },\n                {\n                    title: "Age",\n                    key: "age"\n                },\n                {\n                    title: "Address",\n                    key: "address"\n                }\n            ],\n            data1: [\n                {\n                    name: "John Brown",\n                    age: 18,\n                    address: "New York No. 1 Lake Park",\n                    date: "2016-10-03"\n                },\n                {\n                    name: "Jim Green",\n                    age: 24,\n                    address: "London No. 1 Lake Park",\n                    date: "2016-10-01"\n                },\n                {\n                    name: "Joe Black",\n                    age: 30,\n                    address: "Sydney No. 1 Lake Park",\n                    date: "2016-10-02"\n                },\n                {\n                    name: "Jon Snow",\n                    age: 26,\n                    address: "Ottawa No. 2 Lake Park",\n                    date: "2016-10-04"\n                }\n            ]\n        };\n    },\n    methods: {\n        hanldeSelect(selection, row) {\n            console.log(selection, row);\n        },\n        handleSelectAll(selection) {\n            console.log(selection);\n        }\n    }\n};\n<\/script>\n')])])]),t("p",[e._v("__\n显示代码")]),e._v(" "),t("h2",{attrs:{id:"排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#排序"}},[e._v("#")]),e._v(" 排序")]),e._v(" "),t("p",[e._v("对表格进行排序，可快速查找或对比数据。")]),e._v(" "),t("p",[e._v("Name")]),e._v(" "),e._v(" | Age"),t("svg",{staticClass:"xn-icon active",attrs:{"aria-hidden":"true"}},[t("use",{attrs:{"xlink:href":"#icon-up"}})]),e._v(" "),t("p",[t("svg",{staticClass:"xn-icon",attrs:{"aria-hidden":"true"}},[t("use",{attrs:{"xlink:href":"#icon-down"}})]),e._v(" | Address")]),e._v(" "),t("p",[e._v("------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------\nJohn Brown | 18 | New York No. 1 Lake Park\nJim Green | 24 | London No. 1 Lake Park\nJoe Black | 30 | Sydney No. 1 Lake Park\nJon Snow | 26 | Ottawa No. 2 Lake Park")]),e._v(" "),t("p",[e._v("在列中设置 sortable 属性即可实现以该列为基准的排序，接受一个 Boolean，默认为 false 可以通过 sortType 属性设置默认的排序顺序。可以使用 sortMethod 自定义的排序规则。如果需要后端排序，需将 sortable 设置为 custom，同时在 Table 上监听 on-sort-change 事件，在事件回调中可以获取当前排序的字段名和排序顺序，从而向接口请求排序后的表格数据。")]),e._v(" "),t("div",{staticClass:"language-hljs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<xn-table  :columns="columns1" :data="data1" @on-sort-change="handleSort" ></xn-table>\n<script>\nexport default {\n  data() {\n    return {\n      columns1: [\n        {\n          title: "Name",\n          key: "name"\n        },\n        {\n          title: "Age",\n          key: "age",\n          sortable: "custom", // custom\n          sortType: "asc",\n          sortMethod(a, b, type) {\n            return a.age - b.age;\n          }\n        },\n        {\n          title: "Address",\n          key: "address"\n        }\n      ],\n      data1: [\n        {\n          name: "John Brown",\n          age: 18,\n          address: "New York No. 1 Lake Park",\n          date: "2016-10-03"\n        },\n        {\n          name: "Jim Green",\n          age: 24,\n          address: "London No. 1 Lake Park",\n          date: "2016-10-01"\n        },\n        {\n          name: "Joe Black",\n          age: 30,\n          address: "Sydney No. 1 Lake Park",\n          date: "2016-10-02"\n        },\n        {\n          name: "Jon Snow",\n          age: 26,\n          address: "Ottawa No. 2 Lake Park",\n          date: "2016-10-04"\n        }\n      ]\n    };\n  },\n  methods: {\n    handleSort({ column, type }) {\n      console.log(type);\n    }\n  }\n};\n<\/script>\n')])])]),t("p",[e._v("__\n显示代码")]),e._v(" "),t("h2",{attrs:{id:"attributes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#attributes"}},[e._v("#")]),e._v(" Attributes")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("参数")]),e._v(" "),t("th",[e._v("说明")]),e._v(" "),t("th",[e._v("类型")]),e._v(" "),t("th",[e._v("可选值")]),e._v(" "),t("th",[e._v("默认值")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("data")]),e._v(" "),t("td",[e._v("显示的数据")]),e._v(" "),t("td",[e._v("array")]),e._v(" "),t("td",[e._v("—")]),e._v(" "),t("td",[e._v("—")])]),e._v(" "),t("tr",[t("td",[e._v("columns")]),e._v(" "),t("td",[e._v("表格列的配置描述，具体项见后文")]),e._v(" "),t("td",[e._v("Array")]),e._v(" "),t("td",[e._v("[]")]),e._v(" "),t("td",[e._v("-")])]),e._v(" "),t("tr",[t("td",[e._v("height")]),e._v(" "),t("td",[e._v("Table 的高度，默认为自动高度。如果 height 为 number 类型，单位 px；如果 height 为 string 类型，则这个高度会设置为 Table 的 style.height 的值，Table 的高度会受控于外部样式。")]),e._v(" "),t("td",[e._v("string/number")]),e._v(" "),t("td",[e._v("—")]),e._v(" "),t("td",[e._v("—")])]),e._v(" "),t("tr",[t("td",[e._v("stripe")]),e._v(" "),t("td",[e._v("是否为斑马纹 table")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("—")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("border")]),e._v(" "),t("td",[e._v("是否带有纵向边框")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("—")]),e._v(" "),t("td",[e._v("false")])])])]),e._v(" "),t("h2",{attrs:{id:"table-events"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#table-events"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://ui.fullstackjavascript.cn/components/data/table.html#table-events",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" Table Events")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("事件")]),e._v(" "),t("th",[e._v("说明")]),e._v(" "),t("th",[e._v("参数")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("on-select")]),e._v(" "),t("td",[e._v("在多选模式下有效，选中某一项时触发")]),e._v(" "),t("td",[e._v("selection：已选项数据；row：刚选择的项数据")])]),e._v(" "),t("tr",[t("td",[e._v("on-select-all")]),e._v(" "),t("td",[e._v("在多选模式下有效，点击全选时触发")]),e._v(" "),t("td",[e._v("selection：已选项数据")])]),e._v(" "),t("tr",[t("td",[e._v("on-sort-change")]),e._v(" "),t("td",[e._v("排序时有效，当点击排序时触发")]),e._v(" "),t("td",[e._v("column：当前列数据；key：排序依据的指标")])])])])])}),[],!1,null,null,null);n.default=r.exports}}]);